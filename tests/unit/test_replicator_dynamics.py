"""
Tests for Replicator Dynamics
"""
#import types
import nashpy as nash
import numpy as np
from hypothesis import given
from hypothesis.extra.numpy import arrays
#from hypothesis.strategies import integers
from nashpy.learning.replicator_dynamics import (
    get_derivative_of_fitness,
    replicator_dynamics,
)

@given(M=arrays(np.int8, (3, 3)))
def test_property_get_derivative_of_fitness(M):
    t = 0
    x = np.zeros(M.shape[1])
    derivative_of_fitness = get_derivative_of_fitness(x, t, M)

    assert len(derivative_of_fitness) == len(x)


def test_get_derivative_of_fitness():
    M = np.array([[3, 2, 3], [4, 1, 1], [2, 3, 1]])

    
    x_values = (
        np.array([1, 0, 0]),
        np.array([1 / 2, 1 / 2, 0]),
        np.array([0, 1 / 4, 3 / 4]),
        np.array([1 / 5, 2 / 5, 2 / 5]),
        np.array([1/2, 0, 1/2]),
        np.array([2/4, 1/4, 1/4]),
    )
    derivative_values = (
        np.array([0, 0, 0]),
        np.array([0, 0, 0]),
        np.array([0.0, -0.09375, 0.09375]),
        np.array([ 0.128, -0.144,  0.016]),  
        np.array([ 0.375,  0.   , -0.375]),
        np.array([ 0.125,  0.   , -0.125])  
    )
    
    for x_value, expected_derivative in zip(x_values, derivative_values):
        derivative = get_derivative_of_fitness(x=x_value, t=0, A=M)
        assert np.allclose(derivative, expected_derivative), x_value


def test_replicator_dynamics():
    M = np.array([[3, 2], [4, 1] ])
    y0=[0.9, 0.1]
    timepoints = np.linspace(0, 10, 100)

        

    expected_xs_over_time = np.array([[0.9,        0.1       ],
    [0.89256013, 0.10743987],
    [0.88479436, 0.11520564],
    [0.87671801, 0.12328199],
    [0.86834987, 0.13165013],
    [0.8597121,  0.1402879 ],
    [0.8508299,  0.1491701 ],
    [0.8417312,  0.1582688 ],
    [0.83244622, 0.16755378],
    [0.82300701, 0.17699299],
    [0.81344687, 0.18655313],
    [0.80379989, 0.19620011],
    [0.79410031, 0.20589969],
    [0.78438204, 0.21561796],
    [0.77467816, 0.22532184],
    [0.76502043, 0.23497957],
    [0.75543894, 0.24456106],
    [0.74596174, 0.25403826],
    [0.73661466, 0.26338534],
    [0.72742107, 0.27257893],
    [0.7184018,  0.2815982 ],
    [0.70957507, 0.29042493],
    [0.70095654, 0.29904346],
    [0.69255932, 0.30744068],
    [0.6843941,  0.3156059 ],
    [0.67646927, 0.32353073],
    [0.66879107, 0.33120893],
    [0.66136378, 0.33863622],
    [0.65418987, 0.34581013],
    [0.64727021, 0.35272979],
    [0.64060422, 0.35939578],
    [0.63419006, 0.36580994],
    [0.62802483, 0.37197517],
    [0.62210466, 0.37789534],
    [0.61642492, 0.38357508],
    [0.61098033, 0.38901967],
    [0.60576506, 0.39423494],
    [0.60077288, 0.39922712],
    [0.59599723, 0.40400277],
    [0.59143133, 0.40856867],
    [0.58706824, 0.41293176],
    [0.5829009,  0.4170991 ],
    [0.57892225, 0.42107775],
    [0.57512523, 0.42487477],
    [0.57150283, 0.42849717],
    [0.56804814, 0.43195186],
    [0.56475435, 0.43524565],
    [0.56161481, 0.43838519],
    [0.558623,   0.441377  ],
    [0.55577261, 0.44422739],
    [0.55305749, 0.44694251],
    [0.55047167, 0.44952833],
    [0.5480094,  0.4519906 ],
    [0.54566512, 0.45433488],
    [0.54343348, 0.45656652],
    [0.54130932, 0.45869068],
    [0.53928768, 0.46071232],
    [0.53736381, 0.46263619],
    [0.53553315, 0.46446685],
    [0.53379131, 0.46620869],
    [0.53213411, 0.46786589],
    [0.53055754, 0.46944246],
    [0.52905777, 0.47094223],
    [0.52763113, 0.47236887],
    [0.52627413, 0.47372587],
    [0.52498342, 0.47501658],
    [0.52375581, 0.47624419],
    [0.52258827, 0.47741173],
    [0.52147788, 0.47852212],
    [0.52042188, 0.47957812],
    [0.51941764, 0.48058236],
    [0.51846265, 0.48153735],
    [0.51755449, 0.48244551],
    [0.51669091, 0.48330909],
    [0.51586971, 0.48413029],
    [0.51508885, 0.48491115],
    [0.51434634, 0.48565366],
    [0.51364031, 0.48635969],
    [0.51296897, 0.48703103],
    [0.51233064, 0.48766936],
    [0.51172369, 0.48827631],
    [0.51114658, 0.48885342],
    [0.51059785, 0.48940215],
    [0.51007612, 0.48992388],
    [0.50958005, 0.49041995],
    [0.50910838, 0.49089162],
    [0.50865992, 0.49134008],
    [0.50823353, 0.49176647],
    [0.50782813, 0.49217187],
    [0.50744267, 0.49255733],
    [0.50707619, 0.49292381],
    [0.50672775, 0.49327225],
    [0.50639645, 0.49360355],
    [0.50608147, 0.49391853],
    [0.50578199, 0.49421801],
    [0.50549726, 0.49450274],
    [0.50522655, 0.49477345],
    [0.50496916, 0.49503084],
    [0.50472445, 0.49527555],
    [0.50449178, 0.49550822]],)

    xs = replicator_dynamics(y0=y0, timepoints=timepoints, A=M)
    assert np.allclose(xs, expected_xs_over_time)